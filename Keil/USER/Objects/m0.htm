<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\m0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\m0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Feb 09 22:48:30 2023
<BR><P>
<H3>Maximum Stack Usage =        120 bytes + Unknown(Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UARTTX_Handler &rArr; UARTTXHandler &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[6]">BusFault_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[9]">DebugMon_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[4]">HardFault_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[f]">KEY0_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[10]">KEY1_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[11]">KEY2_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[12]">KEY3_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[5]">MemManage_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[3]">NMI_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[a]">PendSV_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[2]">Reset_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[b]">SysTick_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[15]">SystemInit</a> from system.o(i.SystemInit) referenced from startup_cm0ds.o(.text)
 <LI><a href="#[13]">TIMER_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[e]">UARTOVR_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[d]">UARTRX_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[c]">UARTTX_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[7]">UsageFault_Handler</a> from startup_cm0ds.o(.text) referenced from startup_cm0ds.o(RESET)
 <LI><a href="#[16]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cm0ds.o(.text)
 <LI><a href="#[17]">fputc</a> from retarget.o(i.fputc) referenced from printfb.o(i.__0printf$bare)
 <LI><a href="#[14]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[0]">mem_init</a> from malloc.o(i.mem_init) referenced 2 times from malloc.o(.data)
 <LI><a href="#[1]">mem_perused</a> from malloc.o(i.mem_perused) referenced 2 times from malloc.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[16]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[18]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[5d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[5f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[60]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[61]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMIHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManageHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVCHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>DebugMon_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMonHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSVHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler &rArr; SysTickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UARTRX_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTRX_Handler &rArr; UARTRXHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRXHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>UARTTX_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTTX_Handler &rArr; UARTTXHandler &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTXHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>UARTOVR_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOVRHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>KEY0_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY0_Handler &rArr; KEY0 &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>KEY1_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY1_Handler &rArr; KEY1 &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>KEY2_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY2_Handler &rArr; KEY2 &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>KEY3_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY3_Handler &rArr; KEY3 &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIMER_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cm0ds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIMER_Handler &rArr; Timer_Handler &rArr; myPlaneDraw &rArr; writeOneSprite
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_PicBin
</UL>

<P><STRONG><a name="[19]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[64]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d]"></a>BusFaultHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.BusFaultHandler))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[20]"></a>DebugMonHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.DebugMonHandler))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>

<P><STRONG><a name="[1b]"></a>HardFaultHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.HardFaultHandler))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[43]"></a>Is_SPI_Ready</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_flash.o(i.Is_SPI_Ready))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[26]"></a>KEY0</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, handler.o(i.KEY0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY0 &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0_Handler
</UL>

<P><STRONG><a name="[27]"></a>KEY1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, handler.o(i.KEY1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY1 &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1_Handler
</UL>

<P><STRONG><a name="[28]"></a>KEY2</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, handler.o(i.KEY2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY2 &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2_Handler
</UL>

<P><STRONG><a name="[29]"></a>KEY3</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, handler.o(i.KEY3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY3 &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3_Handler
</UL>

<P><STRONG><a name="[54]"></a>KEY_INIT</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, key.o(i.KEY_INIT))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>LCD_Clear</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>LCD_Display_Dir</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lcd.o(i.LCD_Display_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[35]"></a>LCD_DrawPoint</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lcd.o(i.LCD_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_PicBin
</UL>

<P><STRONG><a name="[36]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, lcd.o(i.LCD_Fast_DrawPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeData
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint8x8x2bin
</UL>

<P><STRONG><a name="[39]"></a>LCD_Init</STRONG> (Thumb, 646 bytes, Stack size 8 bytes, lcd.o(i.LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Init &rArr; LCD_Display_Dir &rArr; LCD_Scan_Dir &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>LCD_Scan_Dir</STRONG> (Thumb, 720 bytes, Stack size 20 bytes, lcd.o(i.LCD_Scan_Dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD_Scan_Dir &rArr; LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[30]"></a>LCD_SetCursor</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lcd.o(i.LCD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_SetCursor &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[3d]"></a>LCD_ShowChar</STRONG> (Thumb, 254 bytes, Stack size 56 bytes, lcd.o(i.LCD_ShowChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[3e]"></a>LCD_ShowString</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, lcd.o(i.LCD_ShowString))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTXHandler
</UL>

<P><STRONG><a name="[32]"></a>LCD_WR_DATA</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, lcd.o(i.LCD_WR_DATA))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_WR_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeData
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[37]"></a>LCD_WR_REG</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lcd.o(i.LCD_WR_REG))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MakeData
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[31]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lcd.o(i.LCD_WriteRAM_Prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_WriteRAM_Prepare &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
</UL>

<P><STRONG><a name="[3c]"></a>LCD_WriteReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lcd.o(i.LCD_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_WriteReg &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>

<P><STRONG><a name="[2e]"></a>LED_toggle</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, led.o(i.LED_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LED_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTXHandler
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRXHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Handler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY3
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY2
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY1
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY0
</UL>

<P><STRONG><a name="[38]"></a>MakeData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(i.MakeData))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>

<P><STRONG><a name="[1c]"></a>MemManageHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.MemManageHandler))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>

<P><STRONG><a name="[1a]"></a>NMIHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.NMIHandler))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[3f]"></a>Paint8x8x2bin</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, lcd.o(i.Paint8x8x2bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Paint8x8x2bin &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>Paint_PicBin</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, lcd.o(i.Paint_PicBin))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Paint_PicBin &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>PendSVHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.PendSVHandler))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[41]"></a>SPI_Flash_Read</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, spi_flash.o(i.SPI_Flash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_Flash_Read &rArr; SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>SPI_Init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi_flash.o(i.SPI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi_flash.o(i.SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_SPI_Ready
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
</UL>

<P><STRONG><a name="[44]"></a>SPI_SendData</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_flash.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReadWriteByte
</UL>

<P><STRONG><a name="[1f]"></a>SVCHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.SVCHandler))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[45]"></a>Set_SysTick_CTRL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.Set_SysTick_CTRL))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTickHandler
</UL>

<P><STRONG><a name="[4d]"></a>Set_SysTick_LOAD</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.Set_SysTick_LOAD))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[4e]"></a>Set_SysTick_VALUE</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.Set_SysTick_VALUE))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>

<P><STRONG><a name="[22]"></a>SysTickHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, handler.o(i.SysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTickHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SysTick_CTRL
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[15]"></a>SystemInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, system.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cm0ds.o(.text)
</UL>
<P><STRONG><a name="[56]"></a>TIMER_Init</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, timer.o(i.TIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>Timer_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, handler.o(i.Timer_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Timer_Handler &rArr; myPlaneDraw &rArr; writeOneSprite
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPlaneDraw
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Handler
</UL>

<P><STRONG><a name="[25]"></a>UARTOVRHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.UARTOVRHandler))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTOVR_Handler
</UL>

<P><STRONG><a name="[23]"></a>UARTRXHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, handler.o(i.UARTRXHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UARTRXHandler &rArr; LED_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ClearRxIRQ
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRX_Handler
</UL>

<P><STRONG><a name="[24]"></a>UARTTXHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, handler.o(i.UARTTXHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UARTTXHandler &rArr; LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint &rArr; LCD_WR_REG
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_ClearTxIRQ
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_toggle
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTX_Handler
</UL>

<P><STRONG><a name="[1e]"></a>UsageFaultHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, handler.o(i.UsageFaultHandler))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>

<P><STRONG><a name="[4b]"></a>__0printf$bare</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>__1printf$bare</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare), UNUSED)

<P><STRONG><a name="[49]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfb.o(i.__0printf$bare))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRXHandler
</UL>

<P><STRONG><a name="[3b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lcd.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>

<P><STRONG><a name="[68]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[69]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[6a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[3a]"></a>delay</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, systick.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SysTick_CTRL
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SysTick_VALUE
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SysTick_LOAD
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[4f]"></a>delay_ms</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, systick.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = delay_ms &rArr; delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfb.o(i.__0printf$bare)
</UL>
<P><STRONG><a name="[14]"></a>main</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = main &rArr; Paint_PicBin &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOneSprite
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Flash_Read
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_PicBin
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint8x8x2bin
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_INIT
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[5a]"></a>mem_free</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, malloc.o(i.mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myfree
</UL>

<P><STRONG><a name="[0]"></a>mem_init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, malloc.o(i.mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_init &rArr; mymemset
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymemset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>mem_malloc</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, malloc.o(i.mem_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mymalloc
</UL>

<P><STRONG><a name="[1]"></a>mem_perused</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, malloc.o(i.mem_perused))
<BR>[Address Reference Count : 1]<UL><LI> malloc.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>myPlaneDraw</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, spriteram.o(i.myPlaneDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = myPlaneDraw &rArr; writeOneSprite
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeOneSprite
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Handler
</UL>

<P><STRONG><a name="[58]"></a>myfree</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, malloc.o(i.myfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = myfree &rArr; mem_free
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>mymalloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, malloc.o(i.mymalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mymalloc &rArr; mem_malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>mymemset</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, malloc.o(i.mymemset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mymemset
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_init
</UL>

<P><STRONG><a name="[48]"></a>uart_ClearRxIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.uart_ClearRxIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTRXHandler
</UL>

<P><STRONG><a name="[4a]"></a>uart_ClearTxIRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(i.uart_ClearTxIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTTXHandler
</UL>

<P><STRONG><a name="[50]"></a>uart_SendChar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uart.o(i.uart_SendChar))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[52]"></a>uart_init</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, uart.o(i.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>writeOneSprite</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, spriteram.o(i.writeOneSprite))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = writeOneSprite
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myPlaneDraw
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[55]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[4c]"></a>_printf_core</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfb.o(i._printf_core), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$bare
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
